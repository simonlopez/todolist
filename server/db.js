// Generated by CoffeeScript 1.4.0
var LoginToken, ObjectId, Schema, Todo, User, base, crypto, db, host, mongoose, utils, validatePresenceOf;

mongoose = require("mongoose");

crypto = require("crypto");

utils = require('./utils');

Schema = mongoose.Schema;

ObjectId = Schema.ObjectId;

validatePresenceOf = function(value) {
  return value && value.length;
};

/*
Model: User
*/


User = new Schema({
  email: {
    type: String,
    validate: [validatePresenceOf, "an email is required"],
    index: {
      unique: true
    }
  },
  hashed_password: String,
  salt: String
});

User.virtual("id").get(function() {
  return this._id.toHexString();
});

User.virtual("password").set(function(password) {
  this._password = password;
  this.salt = this.makeSalt();
  return this.hashed_password = this.encryptPassword(password);
}).get(function() {
  return this._password;
});

User.method("authenticate", function(plainText) {
  return this.encryptPassword(plainText) === this.hashed_password;
});

User.method("makeSalt", function() {
  return Math.round(new Date().valueOf() * Math.random()) + "";
});

User.method("encryptPassword", function(password) {
  return crypto.createHmac("sha1", this.salt).update(password).digest("hex");
});

User.pre("save", function(next) {
  if (!validatePresenceOf(this.password)) {
    return next(new Error("Invalid password"));
  } else {
    return next();
  }
});

/*
Model: LoginToken

Used for session persistence.
*/


LoginToken = new Schema({
  email: {
    type: String,
    index: true
  },
  series: {
    type: String,
    index: true
  },
  token: {
    type: String,
    index: true
  }
});

LoginToken.method("randomToken", function() {
  return Math.round(new Date().valueOf() * Math.random()) + "";
});

LoginToken.pre("save", function(next) {
  this.token = this.randomToken();
  if (this.isNew) {
    this.series = this.randomToken();
  }
  return next();
});

LoginToken.virtual("id").get(function() {
  return this._id.toHexString();
});

LoginToken.virtual("cookieValue").get(function() {
  return JSON.stringify({
    email: this.email,
    token: this.token,
    series: this.series
  });
});

Todo = new Schema({
  user_id: String,
  content: String,
  updated_at: Date
});

mongoose.model("User", User);

mongoose.model("LoginToken", LoginToken);

mongoose.model("Todo", Todo);

host = utils.confKey('mongodb.host');

base = utils.confKey('mongodb.base');

db = mongoose.connect('mongodb://' + host + '/' + base, function(err) {
  if (err) {
    throw err;
  }
  return console.log('Successfully connected to MongoDB');
});
