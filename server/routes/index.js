// Generated by CoffeeScript 1.4.0
var Todo, User, appName, mongoose, utils, utils2;

mongoose = require('mongoose');

Todo = mongoose.model('Todo');

User = mongoose.model('User');

utils = require("connect").utils;

utils2 = require('../utils');

appName = utils2.confKey('app.name');

exports.index = function(req, res, next) {
  var user_id;
  user_id = (req.cookies ? req.cookies.user_id : undefined);
  console.info('search with id: %s', user_id);
  return Todo.find({
    user_id: user_id
  }, function(err, todos) {
    if (err) {
      console.info(err);
    }
    if (err) {
      return next(err);
    }
    return res.render("index.ejs", {
      title: appName,
      todos: todos
    });
  });
};

exports.create = function(req, res, next) {
  var user_id;
  user_id = (req.cookies ? req.cookies.user_id : undefined);
  console.info('save with id: %s', user_id);
  return new Todo({
    user_id: user_id,
    content: req.body.content,
    updated_at: Date.now()
  }).save(function(err, todo, count) {
    if (err) {
      return next(err);
    }
    return res.redirect("/");
  });
};

exports.destroy = function(req, res, next) {
  return Todo.findById(req.params.id, function(err, todo) {
    var user_id;
    user_id = (req.cookies ? req.cookies.user_id : undefined);
    if (todo.user_id !== req.cookies.user_id) {
      return utils.forbidden(res);
    }
    return todo.remove(function(err, todo) {
      if (err) {
        return next(err);
      }
      return res.redirect("/");
    });
  });
};

exports.edit = function(req, res, next) {
  var user_id;
  user_id = (req.cookies ? req.cookies.user_id : undefined);
  return Todo.find({
    user_id: user_id
  }).sort("-updated_at").exec(function(err, todos) {
    if (err) {
      return next(err);
    }
    return res.render("edit.ejs", {
      title: "Express Todo Example",
      todos: todos,
      current: req.params.id
    });
  });
};

exports.update = function(req, res, next) {
  return Todo.findById(req.params.id, function(err, todo) {
    var user_id;
    user_id = (req.cookies ? req.cookies.user_id : undefined);
    if (todo.user_id !== user_id) {
      return utils.forbidden(res);
    }
    todo.content = req.body.content;
    todo.updated_at = Date.now();
    return todo.save(function(err, todo, count) {
      if (err) {
        return next(err);
      }
      return res.redirect("/");
    });
  });
};

exports.session = function(req, res, next) {
  console.info('routes.session');
  res.render("login.ejs", {
    title: appName
  });
  return console.info('routes.session');
};

exports.user = function(req, res, next) {
  console.info('routes.user');
  return res.render("create.ejs", {
    title: appName
  });
};
