// Generated by CoffeeScript 1.4.0
/*
Module dependencies.
*/

var LoginToken, MemStore, NotFound, Todo, User, app, authenticateFromLoginToken, connect, emails, engine, express, host, jade, loadUser, mailer, mailfrom, mailhost, mailport, mongoose, path, port, routes, utils;

express = require('express');

engine = require('ejs-locals');

mailer = require('mailer');

path = require('path');

connect = require('connect');

jade = require('jade');

utils = require('./utils');

mongoose = require('mongoose');

require("./db");

routes = require('./routes');

MemStore = connect.session.MemoryStore;

User = mongoose.model('User');

Todo = mongoose.model('Todo');

LoginToken = mongoose.model('LoginToken');

emails = {
  send: function(template, mailOptions, templateOptions) {
    mailOptions.to = mailOptions.to;
    return renderJadeFile(("" + (process.cwd()) + "/mail/") + template, templateOptions, function(err, text) {
      var i, k, keys, len;
      mailOptions.body = text;
      keys = Object.keys(app.set("mailOptions"));
      k = void 0;
      i = 0;
      len = keys.length;
      while (i < len) {
        k = keys[i];
        if (!mailOptions.hasOwnProperty(k)) {
          mailOptions[k] = app.set("mailOptions")[k];
        }
        i++;
      }
      console.log("[SENDING MAIL]", util.inspect(mailOptions));
      if (app.settings.env === "production") {
        return mailer.send(mailOptions, function(err, result) {
          if (err) {
            return console.log(err);
          }
        });
      }
    });
  },
  sendWelcome: function(user) {
    return this.send("welcome", {
      to: user.email,
      subject: "Welcome to taskManager"
    }, {
      locals: {
        user: user
      }
    });
  }
};

NotFound = function(msg) {
  this.name = "NotFound";
  Error.call(this, msg);
  return Error.captureStackTrace(this, arguments_.callee);
};

port = utils.confKey('server.port');

host = utils.confKey('server.host');

mailhost = utils.confKey('mail.host');

mailport = utils.confKey('mail.port');

mailfrom = utils.confKey('mail.from');

app = module.exports = express();

app.configure(function() {
  app.engine("ejs", engine);
  app.set("views", __dirname + "/../views");
  app.set("view engine", "ejs");
  app.use(express.favicon());
  app.use(express["static"](__dirname + "/../public"));
  app.use(express.logger());
  app.use(express.cookieParser());
  app.use(express.bodyParser());
  app.use(app.router);
  app.set('port', port);
  app.set('host', host);
  app.use(express.logger({
    format: "\u001b[1m:method\u001b[0m \u001b[33m:         url\u001b[0m :response-time ms"
  }));
  app.use(express.session({
    store: new MemStore({
      reapInterval: 60000 * 10
    }),
    secret: "atffl75$%R"
  }));
  return app.set("mailOptions", {
    host: mailhost,
    port: mailport,
    from: mailfrom
  });
});

app.configure("development", function() {
  return app.use(express.errorHandler({
    dumpExceptions: true,
    showStack: true
  }));
});

authenticateFromLoginToken = function(req, res, next) {
  var cookie;
  cookie = JSON.parse(req.cookies.logintoken);
  return LoginToken.findOne({
    email: cookie.email,
    series: cookie.series,
    token: cookie.token
  }, (function(err, token) {
    if (!token) {
      res.redirect("/sessions/new");
      return;
    }
    return User.findOne({
      email: token.email
    }, function(err, user) {
      if (user) {
        req.currentUser = user;
        token.token = token.randomToken();
        return token.save(function() {
          res.cookie("logintoken", token.cookieValue, {
            expires: new Date(Date.now() + 2 * 604800000),
            path: "/"
          });
          return next();
        });
      } else {
        return res.redirect("/sessions/new");
      }
    });
  }));
};

loadUser = function(req, res, next) {
  if (req.cookies.logintoken) {
    return authenticateFromLoginToken(req, res, next);
  } else {
    return res.redirect("/sessions/new");
  }
};

app.get("/", loadUser, function(req, res, next) {
  return routes.index(req, res, next);
});

app.post("/create", loadUser, function(req, res, next) {
  return routes.create(req, res, next);
});

app.get("/destroy/:id", loadUser, function(req, res, next) {
  return routes.destroy(req, res, next);
});

app.get("/edit/:id", loadUser, function(req, res, next) {
  return routes.edit(req, res, next);
});

app.post("/update/:id", loadUser, function(req, res, next) {
  return routes.update(req, res, next);
});

app.get("/users/new", function(req, res, next) {
  var cookie;
  if (req.cookies.logintoken) {
    cookie = JSON.parse(req.cookies.logintoken);
    return LoginToken.findOne({
      email: cookie.email,
      series: cookie.series,
      token: cookie.token
    }, (function(err, token) {
      if (!token) {
        return routes.user(req, res, next);
      }
      return User.findOne({
        email: token.email
      }, function(err, user) {
        if (user) {
          req.currentUser = user;
          token.token = token.randomToken();
          return token.save(function() {
            res.cookie("logintoken", token.cookieValue, {
              expires: new Date(Date.now() + 2 * 604800000),
              path: "/"
            });
            return res.redirect("/");
          });
        } else {
          return routes.user(req, res, next);
        }
      });
    }));
  } else {
    return routes.user(req, res, next);
  }
});

app.post("/users.:format?", function(req, res, next) {
  var user;
  user = new User(req.body.user);
  return user.save(function(err) {
    if (err) {
      return res.redirect("/users/new");
    }
    emails.sendWelcome(user);
    switch (req.params.format) {
      case "json":
        return res.send(user.toObject());
      default:
        return res.redirect("/");
    }
  });
});

app.get("/sessions/new", function(req, res, next) {
  var cookie;
  if (req.cookies.logintoken) {
    cookie = JSON.parse(req.cookies.logintoken);
    return LoginToken.findOne({
      email: cookie.email,
      series: cookie.series,
      token: cookie.token
    }, (function(err, token) {
      if (!token) {
        return routes.session(req, res, next);
      }
      return User.findOne({
        email: token.email
      }, function(err, user) {
        if (user) {
          req.currentUser = user;
          token.token = token.randomToken();
          return token.save(function() {
            res.cookie("logintoken", token.cookieValue, {
              expires: new Date(Date.now() + 2 * 604800000),
              path: "/"
            });
            return res.redirect("/");
          });
        } else {
          return routes.session(req, res, next);
        }
      });
    }));
  } else {
    return routes.session(req, res, next);
  }
});

app.post("/sessions", function(req, res, next) {
  return User.findOne({
    email: req.body.user.email
  }, function(err, user) {
    var expire, loginToken;
    if (user && user.authenticate(req.body.user.password)) {
      expire = new Date(Date.now() + 2 * 604800000);
      loginToken = new LoginToken();
      loginToken.email = user.email;
      return loginToken.save(function() {
        res.cookie("logintoken", loginToken.cookieValue, {
          expires: expire,
          path: "/"
        });
        console.info("cookie: ", loginToken.cookieValue);
        return res.redirect("/");
      });
    } else {
      return res.redirect("/sessions/new");
    }
  });
});

app.get("/sessions", loadUser, function(req, res, next) {
  LoginToken.remove({
    email: req.cookie.email,
    series: req.cookie.series,
    token: req.cookie.token
  }, function() {});
  res.clearCookie("logintoken");
  return res.redirect("/sessions/new");
});

app.del("/sessions", loadUser, function(req, res, next) {
  LoginToken.remove({
    email: req.currentUser.email
  }, function() {});
  res.clearCookie("logintoken");
  return res.redirect("/sessions/new");
});

if (!module.parent) {
  app.listen(port, host, function(err) {
    if (err) {
      console.error('failed to start server on %s:%s with error: %s', host, port, err);
      process.exit(-1);
    }
    console.info('started server on %s:%s', host, port);
    return console.info('environment: %s', app.settings.env);
  });
}
